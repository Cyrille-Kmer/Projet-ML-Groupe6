{"cells":[{"cell_type":"markdown","id":"01f70bc7","metadata":{"id":"01f70bc7"},"source":["<h1 style = \"text-align:center;color:red;font-family:algerian;font-size:35px;\">Projet Machine learning</h1>"]},{"cell_type":"markdown","id":"d4c8ec81","metadata":{"id":"d4c8ec81"},"source":["<h2 style = \"color:red;font-family:algerian;font-size:25px;\">I. Chargement des modules et fonctions</h2>"]},{"cell_type":"code","execution_count":null,"id":"a654d224","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":831,"status":"ok","timestamp":1717916672111,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"},"user_tz":0},"id":"a654d224","outputId":"48f1258d-0a25-4d7e-80c9-a5f2406ff3c8"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-89c541390675>:21: DeprecationWarning: `import kerastuner` is deprecated, please use `import keras_tuner`.\n","  import kerastuner as kt\n"]}],"source":["import warnings\n","from google.colab import drive\n","import pickle\n","import os\n","import glob\n","import pandas as pd\n","import numpy as np\n","import shutil as sh\n","import tensorflow as tf\n","from  tensorflow import keras\n","from keras.models import Sequential, load_model\n","from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Input, Layer\n","from keras.metrics import AUC\n","from keras import optimizers\n","from keras.preprocessing.image import ImageDataGenerator\n","from sklearn.model_selection import KFold, StratifiedKFold\n","from keras import optimizers\n","from sklearn.model_selection import KFold, StratifiedKFold,  GridSearchCV\n","from itertools import product\n","from PIL import Image\n","import kerastuner as kt\n","from kerastuner import HyperModel\n","from kerastuner.tuners import RandomSearch, Hyperband, BayesianOptimization\n","from kerastuner.engine.hyperparameters import HyperParameters\n","from sklearn.metrics import (accuracy_score,\n","                             classification_report,\n","                             roc_auc_score,\n","                             confusion_matrix,\n","                            )\n","\n","# filter warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"markdown","id":"7d919600","metadata":{"id":"7d919600"},"source":["<h2 style = \"color:red;font-family:algerian;font-size:25px;\">II. Organisation des données</h2>"]},{"cell_type":"code","execution_count":null,"id":"gtiwayAGJxnW","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":57724,"status":"ok","timestamp":1717916735917,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"},"user_tz":0},"id":"gtiwayAGJxnW","outputId":"2a995405-fb26-4244-dbda-4fc78b14ce1b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# Répertoire racine du projet\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","id":"335b3472","metadata":{"id":"335b3472"},"source":["<h3 style = \"color:blue;font-family:algerian;font-size:20px;\">2.1. Création des dossiers d'entrainement et de test</h3>"]},{"cell_type":"code","execution_count":null,"id":"2d10cca6","metadata":{"id":"2d10cca6"},"outputs":[],"source":["base_dir =\"/content/drive/MyDrive/Colab Notebooks\"\n","\n","# Dossier images\n","imgs_dir = f\"{base_dir}/images\"\n","\n","# Dossier d'entraînement\n","train_dir = f\"{base_dir}/Train\"\n","os.makedirs(train_dir, exist_ok=True)\n","\n","# Dossier de test\n","test_dir = f\"{base_dir}/Test\"\n","os.makedirs(test_dir, exist_ok=True)"]},{"cell_type":"markdown","id":"23f3f3b0","metadata":{"id":"23f3f3b0"},"source":["<h3 style = \"color:blue;font-family:algerian;font-size:20px;\">2.2. Répartition échantions train-test</h3>"]},{"cell_type":"code","execution_count":null,"id":"160ede2a","metadata":{"id":"160ede2a"},"outputs":[],"source":["# Chemin du répertoire des images\n","\n","\n","# Echantillon d'entrainement\n","train_df = pd.read_csv(f'{base_dir}/Train.csv')\n","train_df[\"img_IDs\"] = [img_ID + \".jpg\" for img_ID in train_df.img_IDs]\n","\n","## Copie des images d'entrainement vers le dossier d'entrainement.\n","train_ids = train_df.img_IDs\n","imgs_train_dirs =[os.path.join(imgs_dir, img_ID) for img_ID in train_ids]\n","for path_img in imgs_train_dirs :\n","    sh.copy(path_img, train_dir)\n","\n","# Echantillon de test\n","test_df = pd.read_csv(f'{base_dir}/Test.csv')\n","test_df[\"img_IDs\"] = [img_ID + \".jpg\" for img_ID in test_df.img_IDs]\n","##  Copie des images de test vers le dossier test\n","test_ids = test_df.img_IDs\n","imgs_test_dirs =[os.path.join(imgs_dir, img_ID) for img_ID in test_ids]\n","for path_img in imgs_test_dirs :\n","    sh.copy(path_img, test_dir)"]},{"cell_type":"markdown","id":"f8d9b4e4","metadata":{"id":"f8d9b4e4"},"source":["<h2 style = \"color:red;font-family:algerian;font-size:25px;\">III. Formation d'un modèle keras simple</h2>"]},{"cell_type":"markdown","source":["Nous allons commencer avec un modèle simple avec lequel nous allons définir notre propre classe de recherche d'hyperparamètres"],"metadata":{"id":"fpnGkGsRCRnv"},"id":"fpnGkGsRCRnv"},{"cell_type":"code","execution_count":null,"id":"HQgck3EZv-s9","metadata":{"id":"HQgck3EZv-s9"},"outputs":[],"source":["# Charger les chemins des images et les étiquettes correspondantes\n","imgIDs = glob.glob(os.path.join(train_dir,\"*.jpg\"))\n","target = train_df.target"]},{"cell_type":"markdown","id":"80442850","metadata":{"id":"80442850"},"source":["## Fonctions de preprocessing"]},{"cell_type":"code","execution_count":null,"id":"ce96798e","metadata":{"id":"ce96798e"},"outputs":[],"source":["# Prétraitement des données\n","def preprocess(image_path, label):\n","    # Charger et décoder l'image à partir du chemin du fichier\n","    image = tf.io.read_file(image_path)\n","    image = tf.image.decode_image(image, channels=3)\n","    image.set_shape([None, None, 3])\n","    # Redimensionner l'image aux dimensions souhaitées\n","    resized_image = tf.image.resize(image, [224, 224])\n","\n","    # Prétraiter l'image redimensionnée en utilisant preprocess_input de Xception\n","    final_image = keras.applications.xception.preprocess_input(resized_image)\n","\n","    return final_image, label\n"]},{"cell_type":"code","execution_count":null,"id":"b69feb29","metadata":{"id":"b69feb29"},"outputs":[],"source":["def CustomTransformer(imgs, target, rep= False, batch_size = 8) :\n","\n","\n","  # Formater les étiquettes en tant que vecteurs binaires (classes multiples)\n","  target = tf.one_hot(target, depth=2)\n","\n","  # Créer le dataset à partir des chemins d'images et des étiquettes\n","  data_set = tf.data.Dataset.from_tensor_slices((imgs, target))\n","\n","  # Prétraitement des donnée\n","  if rep :\n","    data_set = data_set.shuffle(1000).repeat()\n","\n","  data_set = data_set.map(preprocess).batch(batch_size).prefetch(1)\n","\n","  return data_set"]},{"cell_type":"markdown","id":"4Sf5q-pz8GAh","metadata":{"id":"4Sf5q-pz8GAh"},"source":["## Création d'une classe python pour la recherche d'hyperparamètre dans un modèle keras"]},{"cell_type":"code","execution_count":null,"id":"4T77PBNd7Ujb","metadata":{"id":"4T77PBNd7Ujb"},"outputs":[],"source":["class CustomHyperparamTuning():\n","\n","  def __init__(self, estimator, grid_params, kf):\n","    self.estimator = estimator\n","    self.grid_params = grid_params\n","    self.kf = kf\n","    self.best_score = 0\n","    self.best_params = {}\n","    self.best_estimator = None\n","\n","  def search(self, imgPaths, target, steps_per_epoch=10, epochs=6, batch_size=8, verbose=0):\n","    # La combinaison des différents paramètres\n","    param_combinations = list(product(*self.grid_params.values()))\n","\n","    for params in param_combinations:\n","      # Créer un dictionnaire des paramètres nommés pour chaque combinaison\n","      param_dict = {key: value for key, value in zip(self.grid_params.keys(), params)}\n","\n","      print(f\"Training for params : {param_dict}\\n....\")\n","\n","      # Boucle sur les plis\n","      scores=[]\n","      for train_index, val_index in self.kf.split(imgPaths, target):\n","\n","          # Divisez les données en ensemble d'entraînement et ensemble de validation pour ce pli\n","          X_train, X_val = np.take(imgPaths, train_index), np.take(imgPaths, val_index)\n","          y_train, y_val = target[train_index], target[val_index]\n","\n","          # Prétraitement\n","          train_set = CustomTransformer(X_train, y_train, rep =True,  batch_size = batch_size)\n","          val_set = CustomTransformer(X_val, y_val, batch_size = batch_size)\n","\n","          # Configurer un nouveau modèle pour ce pli\n","          model = self.estimator(**param_dict)\n","\n","          # Entrainement du modèle\n","\n","          history = model.fit(train_set,\n","                              validation_data = val_set,\n","                              steps_per_epoch= steps_per_epoch,\n","                              epochs= epochs, batch_size=batch_size, verbose=verbose)\n","          # Performances du modèle\n","          score = model.evaluate(val_set)\n","          scores.append(score[1])\n","\n","      mean_score = np.mean(scores)\n","      if self.best_score < mean_score :\n","        self.best_score = mean_score\n","        self.best_params = param_dict\n","        self.best_estimator = model\n","      print(f\"mean score for this training : {mean_score}\")\n","      print(\"End.............\\n\\n\")"]},{"cell_type":"markdown","id":"e9961bd5","metadata":{"id":"e9961bd5"},"source":["## Recherche de meilleurs hyperparamètre pour l'optimiseur RMSprop"]},{"cell_type":"code","execution_count":null,"id":"ce054d3b","metadata":{"id":"ce054d3b"},"outputs":[],"source":["## Création d'un modèle Keras compilé avec RMSprop\n","def create_new_model(**kwargs) :\n","    model = Sequential([\n","    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(64, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(128, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(128, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Flatten(),\n","    Dense(512, activation='relu'),\n","    Dense(2, activation='sigmoid')\n","    ])\n","    #\n","    model.compile(\n","    loss='binary_crossentropy',\n","    optimizer=optimizers.RMSprop(**kwargs),\n","    metrics=[AUC()] # Ajoutez AUC comme métrique\n","    )\n","    return model"]},{"cell_type":"code","execution_count":null,"id":"RccDAqNRsEBI","metadata":{"id":"RccDAqNRsEBI"},"outputs":[],"source":["## Grille d'hyper paramètres pour l'optimiseur RMSprop\n","param_grid = {\n","    'learning_rate': [0.0001, 0.0005, 0.001],\n","    'rho': [0.8, 0.9, 0.95],\n","    'momentum': [0.0, 0.2, 0.5],\n","    #'epsilon': [1e-7, 1e-6, 1e-5],\n","    'centered': [True, False]\n","}\n","\n","CHT = CustomHyperparamTuning(estimator = create_new_model,\n","                             grid_params = param_grid,\n","                             kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=34))\n","#best_model.save(f\"{base_dir}/RMSprop{best_score_mean}.h5\")"]},{"cell_type":"code","execution_count":null,"id":"e5vgnMc8vilr","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e5vgnMc8vilr","outputId":"90d61723-dd58-4936-a273-5d2f32376a58"},"outputs":[{"name":"stdout","output_type":"stream","text":["Training for params : {'learning_rate': 0.0001, 'rho': 0.8, 'momentum': 0.0, 'centered': True}\n","....\n","3/3 [==============================] - 2s 576ms/step - loss: 0.6442 - auc_8: 0.6838\n","3/3 [==============================] - 1s 163ms/step - loss: 0.6211 - auc_9: 0.7400\n","3/3 [==============================] - 2s 461ms/step - loss: 0.6376 - auc_10: 0.7237\n","3/3 [==============================] - 1s 250ms/step - loss: 0.6991 - auc_11: 0.5650\n","3/3 [==============================] - 1s 156ms/step - loss: 0.5788 - auc_12: 0.7363\n","mean score for this training : 0.6897500276565551\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.8, 'momentum': 0.0, 'centered': False}\n","....\n","3/3 [==============================] - 1s 158ms/step - loss: 0.6486 - auc_13: 0.6700\n","3/3 [==============================] - 1s 256ms/step - loss: 0.6283 - auc_14: 0.7400\n","3/3 [==============================] - 1s 157ms/step - loss: 0.6518 - auc_15: 0.7075\n","3/3 [==============================] - 1s 155ms/step - loss: 0.6625 - auc_16: 0.6550\n","3/3 [==============================] - 1s 162ms/step - loss: 0.6224 - auc_17: 0.7463\n","mean score for this training : 0.7037500023841858\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.8, 'momentum': 0.2, 'centered': True}\n","....\n","3/3 [==============================] - 1s 158ms/step - loss: 0.6542 - auc_18: 0.6938\n","3/3 [==============================] - 1s 253ms/step - loss: 0.5879 - auc_19: 0.7412\n","3/3 [==============================] - 1s 160ms/step - loss: 0.6995 - auc_20: 0.7075\n","3/3 [==============================] - 1s 157ms/step - loss: 0.6783 - auc_21: 0.5725\n","3/3 [==============================] - 1s 167ms/step - loss: 0.5915 - auc_22: 0.7337\n","mean score for this training : 0.6897499918937683\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.8, 'momentum': 0.2, 'centered': False}\n","....\n","3/3 [==============================] - 1s 259ms/step - loss: 0.6423 - auc_23: 0.6675\n","3/3 [==============================] - 2s 348ms/step - loss: 0.6104 - auc_24: 0.7475\n","3/3 [==============================] - 1s 331ms/step - loss: 0.6649 - auc_25: 0.6237\n","3/3 [==============================] - 1s 291ms/step - loss: 0.6620 - auc_26: 0.6712\n","3/3 [==============================] - 1s 165ms/step - loss: 0.5947 - auc_27: 0.7363\n","mean score for this training : 0.6892500042915344\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.8, 'momentum': 0.5, 'centered': True}\n","....\n","3/3 [==============================] - 1s 341ms/step - loss: 0.6600 - auc_28: 0.6887\n","3/3 [==============================] - 1s 156ms/step - loss: 0.5928 - auc_29: 0.7513\n","3/3 [==============================] - 1s 240ms/step - loss: 0.8576 - auc_30: 0.7000\n","3/3 [==============================] - 2s 521ms/step - loss: 0.6870 - auc_31: 0.4750\n","3/3 [==============================] - 1s 158ms/step - loss: 0.6060 - auc_32: 0.7212\n","mean score for this training : 0.6672500014305115\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.8, 'momentum': 0.5, 'centered': False}\n","....\n","3/3 [==============================] - 1s 245ms/step - loss: 0.6379 - auc_33: 0.6925\n","3/3 [==============================] - 1s 164ms/step - loss: 0.5869 - auc_34: 0.7400\n","3/3 [==============================] - 1s 157ms/step - loss: 0.8485 - auc_35: 0.6925\n","3/3 [==============================] - 1s 229ms/step - loss: 0.6912 - auc_36: 0.5700\n","3/3 [==============================] - 1s 164ms/step - loss: 0.6023 - auc_37: 0.7350\n","mean score for this training : 0.6860000133514405\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.9, 'momentum': 0.0, 'centered': True}\n","....\n","3/3 [==============================] - 1s 157ms/step - loss: 0.6640 - auc_38: 0.6912\n","3/3 [==============================] - 1s 281ms/step - loss: 0.6253 - auc_39: 0.7475\n","3/3 [==============================] - 1s 148ms/step - loss: 0.6498 - auc_40: 0.6938\n","3/3 [==============================] - 1s 252ms/step - loss: 0.6480 - auc_41: 0.6762\n","3/3 [==============================] - 1s 166ms/step - loss: 0.6330 - auc_42: 0.7375\n","mean score for this training : 0.709249985218048\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.9, 'momentum': 0.0, 'centered': False}\n","....\n","3/3 [==============================] - 1s 158ms/step - loss: 0.6612 - auc_43: 0.6700\n","3/3 [==============================] - 1s 165ms/step - loss: 0.6063 - auc_44: 0.7337\n","3/3 [==============================] - 1s 285ms/step - loss: 0.6393 - auc_45: 0.7275\n","3/3 [==============================] - 1s 163ms/step - loss: 0.6660 - auc_46: 0.6612\n","3/3 [==============================] - 1s 158ms/step - loss: 0.6089 - auc_47: 0.7400\n","mean score for this training : 0.7064999938011169\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.9, 'momentum': 0.2, 'centered': True}\n","....\n","3/3 [==============================] - 1s 275ms/step - loss: 0.6405 - auc_48: 0.6775\n","3/3 [==============================] - 1s 165ms/step - loss: 0.6163 - auc_49: 0.7450\n","3/3 [==============================] - 1s 276ms/step - loss: 0.7104 - auc_50: 0.7250\n","3/3 [==============================] - 1s 174ms/step - loss: 0.6653 - auc_51: 0.6637\n","3/3 [==============================] - 1s 164ms/step - loss: 0.8955 - auc_52: 0.7325\n","mean score for this training : 0.7087499976158143\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.9, 'momentum': 0.2, 'centered': False}\n","....\n","3/3 [==============================] - 1s 275ms/step - loss: 0.6520 - auc_53: 0.6850\n","3/3 [==============================] - 1s 281ms/step - loss: 0.5983 - auc_54: 0.7463\n","3/3 [==============================] - 1s 162ms/step - loss: 0.6740 - auc_55: 0.7000\n","3/3 [==============================] - 1s 163ms/step - loss: 0.6568 - auc_56: 0.6825\n","3/3 [==============================] - 1s 160ms/step - loss: 0.6041 - auc_57: 0.7387\n","mean score for this training : 0.7105000019073486\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.9, 'momentum': 0.5, 'centered': True}\n","....\n","3/3 [==============================] - 1s 293ms/step - loss: 0.6639 - auc_58: 0.6775\n","3/3 [==============================] - 2s 426ms/step - loss: 0.6294 - auc_59: 0.7100\n","3/3 [==============================] - 2s 331ms/step - loss: 0.6912 - auc_60: 0.5925\n","3/3 [==============================] - 1s 280ms/step - loss: 0.7083 - auc_61: 0.4900\n","3/3 [==============================] - 1s 158ms/step - loss: 0.5607 - auc_62: 0.7263\n","mean score for this training : 0.63924999833107\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.9, 'momentum': 0.5, 'centered': False}\n","....\n","3/3 [==============================] - 1s 162ms/step - loss: 0.6840 - auc_63: 0.6737\n","3/3 [==============================] - 1s 164ms/step - loss: 0.5880 - auc_64: 0.7475\n","3/3 [==============================] - 1s 163ms/step - loss: 0.7089 - auc_65: 0.7025\n","3/3 [==============================] - 1s 160ms/step - loss: 0.7494 - auc_66: 0.4925\n","3/3 [==============================] - 1s 167ms/step - loss: 0.7348 - auc_67: 0.4887\n","mean score for this training : 0.6209999918937683\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.95, 'momentum': 0.0, 'centered': True}\n","....\n","3/3 [==============================] - 1s 293ms/step - loss: 0.6446 - auc_68: 0.6800\n","3/3 [==============================] - 1s 164ms/step - loss: 0.5910 - auc_69: 0.7462\n","3/3 [==============================] - 1s 258ms/step - loss: 0.6765 - auc_70: 0.7113\n","3/3 [==============================] - 1s 246ms/step - loss: 0.6642 - auc_71: 0.6688\n","3/3 [==============================] - 1s 166ms/step - loss: 0.6000 - auc_72: 0.7375\n","mean score for this training : 0.7087500214576721\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.95, 'momentum': 0.0, 'centered': False}\n","....\n","3/3 [==============================] - 1s 165ms/step - loss: 0.6393 - auc_73: 0.6712\n","3/3 [==============================] - 1s 268ms/step - loss: 0.6094 - auc_74: 0.7425\n","3/3 [==============================] - 1s 159ms/step - loss: 0.6897 - auc_75: 0.7400\n","3/3 [==============================] - 1s 158ms/step - loss: 0.6788 - auc_76: 0.6762\n","3/3 [==============================] - 1s 160ms/step - loss: 0.5854 - auc_77: 0.7413\n","mean score for this training : 0.7142500042915344\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.95, 'momentum': 0.2, 'centered': True}\n","....\n","3/3 [==============================] - 1s 165ms/step - loss: 0.6421 - auc_78: 0.6687\n","3/3 [==============================] - 1s 269ms/step - loss: 0.5812 - auc_79: 0.7575\n","3/3 [==============================] - 1s 271ms/step - loss: 0.7828 - auc_80: 0.7350\n","3/3 [==============================] - 1s 170ms/step - loss: 0.6770 - auc_81: 0.6612\n","3/3 [==============================] - 1s 164ms/step - loss: 0.6254 - auc_82: 0.7475\n","mean score for this training : 0.7139999985694885\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'rho': 0.95, 'momentum': 0.2, 'centered': False}\n","....\n"]}],"source":["%%time\n","# Recherche de meilleurs hyperparamètres\n","CHT.search(imgPaths=imgIDs, target=target)"]},{"cell_type":"markdown","id":"189ddf2d","metadata":{"id":"189ddf2d"},"source":["## Recherche de meilleurs hyperparamètres pour l'optimiseur Adam"]},{"cell_type":"code","execution_count":null,"id":"decf506d","metadata":{"id":"decf506d"},"outputs":[],"source":["## Création d'un modèle avec l'optimiseur Adam\n","def create_new_model(**kwargs) :\n","    model = Sequential([\n","    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(64, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(128, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(128, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Flatten(),\n","    Dense(512, activation='relu'),\n","    Dense(2, activation='sigmoid')\n","    ])\n","    #\n","    model.compile(\n","    loss='binary_crossentropy',\n","    optimizer=optimizers.Adam(**kwargs),\n","    metrics=[AUC()] # Ajoutez AUC comme métrique\n","    )\n","    return model\n"]},{"cell_type":"code","execution_count":null,"id":"aWKz0Mf-KXCt","metadata":{"id":"aWKz0Mf-KXCt"},"outputs":[],"source":["model = create_new_model()"]},{"cell_type":"code","execution_count":null,"id":"MqA9mAGf9zrf","metadata":{"id":"MqA9mAGf9zrf"},"outputs":[],"source":["## Grille d'hyper paramètres pour l'optimiseur Adama\n","param_grid = {\n","    'learning_rate': [0.0001, 0.0005, 0.001],\n","    'beta_1': [0.9, 0.95, 0.99],\n","    'epsilon': [1e-7, 1e-6],\n","    'amsgrad': [True, False]\n","}\n","\n","CHT = CustomHyperparamTuning(estimator = create_new_model,\n","                             grid_params = param_grid,\n","                             kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=34))"]},{"cell_type":"code","execution_count":null,"id":"KnWIHNcT97tj","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KnWIHNcT97tj","outputId":"96784f42-7e81-4a5b-9190-729a4fefd3ea"},"outputs":[{"name":"stdout","output_type":"stream","text":["Training for params : {'learning_rate': 0.0001, 'beta_1': 0.9, 'epsilon': 1e-08, 'amsgrad': True}\n","....\n","3/3 [==============================] - 1s 160ms/step - loss: 0.7193 - auc_23: 0.7413\n","3/3 [==============================] - 1s 159ms/step - loss: 0.4908 - auc_24: 0.8600\n","3/3 [==============================] - 1s 157ms/step - loss: 1.0513 - auc_25: 0.6338\n","3/3 [==============================] - 1s 156ms/step - loss: 0.9357 - auc_26: 0.4963\n","3/3 [==============================] - 2s 408ms/step - loss: 0.7352 - auc_27: 0.7050\n","mean score for this training : 0.6872500121593476\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.9, 'epsilon': 1e-08, 'amsgrad': False}\n","....\n","3/3 [==============================] - 1s 158ms/step - loss: 0.6632 - auc_28: 0.7475\n","3/3 [==============================] - 1s 165ms/step - loss: 0.5922 - auc_29: 0.7925\n","3/3 [==============================] - 1s 158ms/step - loss: 1.0663 - auc_30: 0.6488\n","3/3 [==============================] - 1s 161ms/step - loss: 1.0915 - auc_31: 0.5213\n","3/3 [==============================] - 1s 259ms/step - loss: 0.7796 - auc_32: 0.7362\n","mean score for this training : 0.6892500042915344\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.9, 'epsilon': 1e-07, 'amsgrad': True}\n","....\n","3/3 [==============================] - 1s 160ms/step - loss: 0.7022 - auc_33: 0.7350\n","3/3 [==============================] - 1s 160ms/step - loss: 0.5988 - auc_34: 0.8050\n","3/3 [==============================] - 1s 157ms/step - loss: 0.9071 - auc_35: 0.6712\n","3/3 [==============================] - 1s 145ms/step - loss: 1.0137 - auc_36: 0.6438\n","3/3 [==============================] - 1s 292ms/step - loss: 0.9620 - auc_37: 0.6988\n","mean score for this training : 0.7107499957084655\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.9, 'epsilon': 1e-07, 'amsgrad': False}\n","....\n","3/3 [==============================] - 1s 144ms/step - loss: 0.7219 - auc_38: 0.7500\n","3/3 [==============================] - 1s 166ms/step - loss: 0.5200 - auc_39: 0.8200\n","3/3 [==============================] - 1s 223ms/step - loss: 1.4071 - auc_40: 0.6737\n","3/3 [==============================] - 1s 167ms/step - loss: 1.0298 - auc_41: 0.6150\n","3/3 [==============================] - 1s 256ms/step - loss: 0.9363 - auc_42: 0.7025\n","mean score for this training : 0.712250018119812\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.9, 'epsilon': 1e-06, 'amsgrad': True}\n","....\n","3/3 [==============================] - 1s 152ms/step - loss: 0.7187 - auc_43: 0.7425\n","3/3 [==============================] - 1s 152ms/step - loss: 0.5203 - auc_44: 0.8225\n","3/3 [==============================] - 1s 162ms/step - loss: 0.9858 - auc_45: 0.7075\n","3/3 [==============================] - 1s 157ms/step - loss: 0.9045 - auc_46: 0.5587\n","3/3 [==============================] - 1s 159ms/step - loss: 0.7425 - auc_47: 0.7212\n","mean score for this training : 0.7104999899864197\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.9, 'epsilon': 1e-06, 'amsgrad': False}\n","....\n","3/3 [==============================] - 1s 165ms/step - loss: 0.6865 - auc_48: 0.7350\n","3/3 [==============================] - 1s 161ms/step - loss: 0.6604 - auc_49: 0.7263\n","3/3 [==============================] - 1s 158ms/step - loss: 0.9540 - auc_50: 0.7050\n","3/3 [==============================] - 1s 301ms/step - loss: 0.9542 - auc_51: 0.5962\n","3/3 [==============================] - 1s 158ms/step - loss: 0.9061 - auc_52: 0.7800\n","mean score for this training : 0.7085000276565552\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.95, 'epsilon': 1e-08, 'amsgrad': True}\n","....\n","3/3 [==============================] - 1s 159ms/step - loss: 0.7247 - auc_53: 0.7362\n","3/3 [==============================] - 1s 167ms/step - loss: 0.5340 - auc_54: 0.8100\n","3/3 [==============================] - 1s 163ms/step - loss: 0.9264 - auc_55: 0.6988\n","3/3 [==============================] - 1s 209ms/step - loss: 0.9074 - auc_56: 0.5725\n","3/3 [==============================] - 1s 158ms/step - loss: 0.8201 - auc_57: 0.6863\n","mean score for this training : 0.7007499933242798\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.95, 'epsilon': 1e-08, 'amsgrad': False}\n","....\n","3/3 [==============================] - 1s 159ms/step - loss: 0.6820 - auc_58: 0.7413\n","3/3 [==============================] - 1s 160ms/step - loss: 0.5878 - auc_59: 0.7475\n","3/3 [==============================] - 1s 155ms/step - loss: 0.9848 - auc_60: 0.7038\n","3/3 [==============================] - 1s 156ms/step - loss: 1.0604 - auc_61: 0.6187\n","3/3 [==============================] - 1s 273ms/step - loss: 0.8231 - auc_62: 0.6762\n","mean score for this training : 0.6974999904632568\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.95, 'epsilon': 1e-07, 'amsgrad': True}\n","....\n","3/3 [==============================] - 1s 157ms/step - loss: 0.7875 - auc_63: 0.7438\n","3/3 [==============================] - 1s 171ms/step - loss: 0.6240 - auc_64: 0.7188\n","3/3 [==============================] - 1s 155ms/step - loss: 1.1239 - auc_65: 0.7200\n","3/3 [==============================] - 1s 157ms/step - loss: 0.8744 - auc_66: 0.6200\n","3/3 [==============================] - 1s 271ms/step - loss: 0.6669 - auc_67: 0.6813\n","mean score for this training : 0.6967500209808349\n","End.............\n","\n","\n","Training for params : {'learning_rate': 0.0001, 'beta_1': 0.95, 'epsilon': 1e-07, 'amsgrad': False}\n","....\n","3/3 [==============================] - 1s 158ms/step - loss: 0.7413 - auc_68: 0.7450\n","3/3 [==============================] - 1s 155ms/step - loss: 0.5580 - auc_69: 0.7850\n","3/3 [==============================] - 1s 157ms/step - loss: 0.9013 - auc_70: 0.6950\n","3/3 [==============================] - 1s 157ms/step - loss: 0.8982 - auc_71: 0.5925\n"]}],"source":["%%time\n","# Recherche de meilleurs hyperparamètres\n","CHT.search(imgPaths=imgIDs, target=target, steps_per_epoch = 100//8, epochs=10, batch_size=8)\n","# Enregistrez l'instance dans un fichier"]},{"cell_type":"code","execution_count":null,"id":"tK4xIOtJs5Ha","metadata":{"id":"tK4xIOtJs5Ha"},"outputs":[],"source":["with open(f'{base_dir}/custom_tuner_{round(CHT.best_score, 4)}.pkl', 'wb') as file:\n","    pickle.dump(CHT, file)"]},{"cell_type":"markdown","id":"2fd33063","metadata":{"id":"2fd33063"},"source":["<h2 style = \"color:red;font-family:algerian;font-size:25px;\">IV- Formation d'un modèle basé sur Hypermodel</h2>"]},{"cell_type":"markdown","source":["Dans cette section, nous allons construire un modèle Keras basé sur Hypermodel et utilisant keras_tuner pour la recherche d'hyperparamètres"],"metadata":{"id":"7xuAHwzTDImd"},"id":"7xuAHwzTDImd"},{"cell_type":"markdown","id":"Mgd3Dbv2MydK","metadata":{"id":"Mgd3Dbv2MydK"},"source":["### Chargement des données"]},{"cell_type":"code","execution_count":null,"id":"xe29k3PiMqbl","metadata":{"id":"xe29k3PiMqbl"},"outputs":[],"source":["# Chargement du fichier Train.csv et Test.csv\n","train_df = pd.read_csv(os.path.join(base_dir, 'Train.csv'))\n","test_df = pd.read_csv(os.path.join(base_dir, 'Test.csv'))\n","# Chemins d'accès aux images d'entrainement\n","imgs_paths_train  = [os.path.join(train_dir, img_ID + \".jpg\") for img_ID in train_df.img_IDs]\n","# Chemins d'accès aux images de test\n","imgs_paths_test  = [os.path.join(test_dir, img_ID + \".jpg\") for img_ID in test_df.img_IDs]\n","# Construction du dataFrame du jeu de donnée d'entrainnement\n","train_df['Img'] = [Image.open(img_path).resize((224, 224)) for img_path in imgs_paths_train]\n","train_df = train_df.reindex(columns=['img_IDs', 'Img', 'target'])\n","# Construction du dataFrame du jeu de donnée de test\n","test_df['Img'] = [Image.open(img_path).resize((224, 224)) for img_path in imgs_paths_test]\n","test_df = test_df.reindex(columns=['img_IDs', 'Img', 'target'])"]},{"cell_type":"code","execution_count":null,"id":"xWTIfkC7kQh3","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":839,"status":"ok","timestamp":1717890958087,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"},"user_tz":0},"id":"xWTIfkC7kQh3","outputId":"fe6fcc12-be31-4818-d333-30bf7d89fc79"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         img_IDs                                                Img  target\n","0  ID_04UTZ83A24  <PIL.Image.Image image mode=RGB size=224x224 a...       0\n","1  ID_0URH2U2RON  <PIL.Image.Image image mode=RGB size=224x224 a...       1\n","2  ID_0ZEPOZGGQ1  <PIL.Image.Image image mode=RGB size=224x224 a...       0\n","3  ID_1595QTX5OA  <PIL.Image.Image image mode=RGB size=224x224 a...       1\n","4  ID_1RAE4SS5S6  <PIL.Image.Image image mode=RGB size=224x224 a...       1"],"text/html":["\n","  <div id=\"df-0fb54dcd-7cc1-4147-8c32-f27a2ee24ba5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>img_IDs</th>\n","      <th>Img</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ID_04UTZ83A24</td>\n","      <td>&lt;PIL.Image.Image image mode=RGB size=224x224 a...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ID_0URH2U2RON</td>\n","      <td>&lt;PIL.Image.Image image mode=RGB size=224x224 a...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ID_0ZEPOZGGQ1</td>\n","      <td>&lt;PIL.Image.Image image mode=RGB size=224x224 a...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ID_1595QTX5OA</td>\n","      <td>&lt;PIL.Image.Image image mode=RGB size=224x224 a...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ID_1RAE4SS5S6</td>\n","      <td>&lt;PIL.Image.Image image mode=RGB size=224x224 a...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0fb54dcd-7cc1-4147-8c32-f27a2ee24ba5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0fb54dcd-7cc1-4147-8c32-f27a2ee24ba5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0fb54dcd-7cc1-4147-8c32-f27a2ee24ba5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dc54109f-8dcd-43c5-951a-f51a1a7e2b45\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dc54109f-8dcd-43c5-951a-f51a1a7e2b45')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dc54109f-8dcd-43c5-951a-f51a1a7e2b45 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df","summary":"{\n  \"name\": \"train_df\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"img_IDs\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"ID_U8I4LVDWNJ\",\n          \"ID_L20KNWNMKG\",\n          \"ID_PIL6QCA60E\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Img\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}],"source":["train_df.head()"]},{"cell_type":"code","execution_count":null,"id":"dO8B1nE4lPCY","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"executionInfo":{"elapsed":571,"status":"ok","timestamp":1717890962663,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"},"user_tz":0},"id":"dO8B1nE4lPCY","outputId":"346e1c83-8a35-4b8f-a99d-b11a2ce13f1d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=224x224>"],"image/png":"\n"},"metadata":{},"execution_count":10}],"source":["train_df['Img'] [1]"]},{"cell_type":"markdown","id":"79247a93","metadata":{"id":"79247a93"},"source":["<h3 style = \"color:blue;font-family:algerian;font-size:20px;\">Prétraitement de données</h3>"]},{"cell_type":"code","execution_count":null,"id":"daO3T407oay4","metadata":{"id":"daO3T407oay4"},"outputs":[],"source":["def preprocess(Img, target=None):\n","\n","  # Formater les étiquettes en tant que vecteurs binaires (classes multiples)\n","  if target is not None :\n","      target = tf.one_hot(target, depth=2)\n","\n","  ## Convertir les images en tableau numpy\n","  Img = np.array(list(Img)).astype(\"float32\")\n","  ## Appliquer un processing du modèle Xception\n","  keras.applications.xception.preprocess_input(Img)\n","  return Img, target\n","\n","X_train, y_train = preprocess(train_df.Img, train_df.target)\n","X_test, _ = preprocess(test_df.Img)"]},{"cell_type":"markdown","id":"3fc3a7e7","metadata":{"id":"3fc3a7e7"},"source":["### Utilisation d'une classe héritée de kerastuner.HyperModel"]},{"cell_type":"code","execution_count":null,"id":"398d5564","metadata":{"id":"398d5564"},"outputs":[],"source":["class MyHyperModel(HyperModel):\n","    def __init__(self, input_shape, num_classes):\n","        self.input_shape = input_shape\n","        self.num_classes = num_classes\n","\n","    def build(self, hp):\n","        model = Sequential([\n","            Conv2D(hp.Int('conv1_units', min_value=16, max_value=128, step=16),\n","                   (3, 3),\n","                   activation='relu',\n","                   input_shape=self.input_shape),\n","            MaxPooling2D((2, 2)),\n","            Conv2D(hp.Int('conv2_units', min_value=32, max_value=256, step=32),\n","                   (3, 3),\n","                   activation='relu'),\n","            MaxPooling2D((2, 2)),\n","            Conv2D(hp.Int('conv3_units', min_value=64, max_value=512, step=64),\n","                   (3, 3),\n","                   activation='relu'),\n","            MaxPooling2D((2, 2)),\n","            Conv2D(hp.Int('conv4_units', min_value=64, max_value=512, step=64),\n","                   (3, 3),\n","                   activation='relu'),\n","            MaxPooling2D((2, 2)),\n","            Flatten(),\n","            Dense(hp.Int('dense_units', min_value=128, max_value=1024, step=128),\n","                  activation='relu'),\n","            Dense(self.num_classes, activation='sigmoid')\n","        ])\n","\n","        model.compile(\n","            loss='binary_crossentropy',\n","            optimizer=optimizers.Adam(\n","                learning_rate=hp.Choice('learning_rate', values=[5e-5, 1e-4, 5e-4, 1e-3, 1e-2], default=1e-4)\n","                #beta_1=hp.Float('beta_1', min_value=0.85, max_value=0.99, step=0.01, default=0.9),\n","                #epsilon=hp.Choice('epsilon', values=[1e-7, 1e-8], default=1e-7)\n","            ),\n","            metrics=[AUC()]\n","        )\n","\n","        return model\n","\n","# Créer une fonction pour calculer l'AUC en tant que métrique\n","def auc_metric(y_true, y_pred):\n","    auc = AUC()(y_true, y_pred)\n","    return auc\n","# Créer un objectif Keras Tuner basé sur la fonction d'objectif personnalisée\n","objective = kt.Objective(\"auc\", direction=\"max\")\n"]},{"cell_type":"markdown","id":"BMMSJfshwWg8","metadata":{"id":"BMMSJfshwWg8"},"source":["### Créer une instance de MyHyperModel"]},{"cell_type":"code","execution_count":null,"id":"_yYUmBMIwO-x","metadata":{"id":"_yYUmBMIwO-x"},"outputs":[],"source":["# Créer une instance de la classe MyHyperModel\n","input_shape, num_classes = X_train.shape[1:], y_train.shape[1]\n","hypermodel = MyHyperModel(input_shape, num_classes)"]},{"cell_type":"markdown","id":"36d16dce","metadata":{"id":"36d16dce"},"source":["### 1. Recherche aléatoire"]},{"cell_type":"code","execution_count":null,"id":"acef435d","metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"acef435d","outputId":"104fc4fa-3a8d-41d4-c620-d3330d9dea4d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Trial 10 Complete [00h 03m 24s]\n","auc: 0.9655468463897705\n","\n","Best auc So Far: 0.9655468463897705\n","Total elapsed time: 00h 42m 45s\n","CPU times: user 50min 48s, sys: 9min 21s, total: 1h 9s\n","Wall time: 42min 45s\n"]}],"source":["%%time\n","# Créer un tuner RandomSearch avec l'objectif 'auc'\n","tuner_rs = RandomSearch(\n","    hypermodel,\n","    objective= objective,\n","    seed=42,\n","    max_trials=10,\n","    directory='random_search',  # Répertoire pour enregistrer les résultats\n","    project_name='my_random_search'  # Nom du projet\n",")\n","\n","# La recherche aléatoire des hyperparamètres\n","tuner_rs.search(X_train, y_train, epochs=10, validation_split=0.2)\n","\n","# Obtenir le meilleur modèle trouvé par le tuner\n","best_model = tuner_rs.get_best_models(num_models=1)[0]\n","# Enrégistré le meilleur modèle\n","best_model.save(f'{base_dir}/RandomSearch.h5')"]},{"cell_type":"code","source":["best_model = load_model(f'{base_dir}/RandomSearch.h5')"],"metadata":{"id":"AiYgodMNYCER"},"id":"AiYgodMNYCER","execution_count":null,"outputs":[]},{"cell_type":"code","source":["## Prédiction sur l'échantillon test\n","y_test_pred = best_model.predict(X_test)\n","_, y_test_pred = zip(*y_test_pred)\n","## AUC score\n","print(\"roc_auc_score\", roc_auc_score(test_df.target, y_test_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LLe5SNKMKbeL","executionInfo":{"status":"ok","timestamp":1717876274102,"user_tz":0,"elapsed":2868,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"}},"outputId":"2ae54f18-2939-4c49-d9ee-e1da2c6e8ff2"},"id":"LLe5SNKMKbeL","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 2s 141ms/step\n","roc_auc_score 0.9826388888888888\n"]}]},{"cell_type":"markdown","source":["<h3 style = \"color:blue;font-family:algerian;font-size:20px;\">Optimisation bayésienne</h3>"],"metadata":{"id":"8Phh7WzQOM-2"},"id":"8Phh7WzQOM-2"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7a29209f-57a2-4531-f9c8-37a9495116a5","id":"_axOujHlObed"},"outputs":[{"name":"stdout","output_type":"stream","text":["Trial 13 Complete [00h 09m 49s]\n","auc: 0.6590234339237213\n","\n","Best auc So Far: 0.9683203101158142\n","Total elapsed time: 02h 32m 14s\n","\n","Search: Running Trial #14\n","\n","Value             |Best Value So Far |Hyperparameter\n","32                |96                |conv1_units\n","160               |32                |conv2_units\n","256               |256               |conv3_units\n","64                |192               |conv4_units\n","896               |1024              |dense_units\n","0.01              |0.001             |learning_rate\n","0.99              |0.93              |beta_1\n","1e-08             |1e-07             |epsilon\n","\n","Epoch 1/10\n"]}],"source":["tuner_bo = BayesianOptimization(\n","            hypermodel,\n","            objective=objective,\n","            max_trials=30,\n","            seed=42,\n","            executions_per_trial=2,\n","            directory=os.path.join(base_dir,'BayesianOptimization'),  # Répertoire pour enregistrer les résultats\n","            project_name='my_BayesianOptimization'\n","        )\n","tuner_bo.search(X_train, y_train, epochs=10, validation_split=0.2)\n","best_model = tuner_bo.get_best_models(num_models=1)[0]\n","best_model.save(f'{base_dir}/BayesianOptimization.h5')"],"id":"_axOujHlObed"},{"cell_type":"code","source":["best_model = load_model(f'{base_dir}/BayesianOptimization.h5')"],"metadata":{"id":"1HLAo0KqaaQ-"},"id":"1HLAo0KqaaQ-","execution_count":null,"outputs":[]},{"cell_type":"code","source":["## Prédiction sur l'échantillon test\n","y_test_pred = best_model.predict(X_test)\n","_, y_test_pred = zip(*y_test_pred)\n","## AUC score\n","print(\"roc_auc_score\", roc_auc_score(test_df.target, y_test_pred))"],"metadata":{"id":"BJu33jHDacdp"},"id":"BJu33jHDacdp","execution_count":null,"outputs":[]},{"cell_type":"markdown","id":"181580f4","metadata":{"id":"181580f4"},"source":["<h3 style = \"color:blue;font-family:algerian;font-size:20px;\">Hyperband</h3>"]},{"cell_type":"code","execution_count":null,"id":"dbe92b2a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6420906,"status":"ok","timestamp":1717615392926,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"},"user_tz":0},"id":"dbe92b2a","outputId":"18f0fef0-81fc-4796-d852-bfbcd7c37af3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Trial 30 Complete [00h 11m 50s]\n","auc: 0.8694921433925629\n","\n","Best auc So Far: 0.9797656238079071\n","Total elapsed time: 03h 52m 47s\n","CPU times: user 2h 12min 37s, sys: 17min 43s, total: 2h 30min 20s\n","Wall time: 1h 47min 1s\n"]}],"source":["%%time\n","tuner_hb = Hyperband(\n","            hypermodel,\n","            max_epochs=10,\n","            objective=objective,\n","            seed=42,\n","            executions_per_trial=2\n","        )\n","## Recherche de meilleurs d'hyperparamètres\n","tuner_hb.search(X_train, y_train, epochs=10, validation_split=0.2)\n","## Meilleur modèle\n","best_model = tuner_hb.get_best_models(num_models=1)[0]\n","## Enrégistrer le meilleur modle\n","best_model.save(f'{base_dir}/Hyperband.h5')"]},{"cell_type":"code","source":["best_model = load_model(f'{base_dir}/Hyperband.h5')\n","best_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XsrUg894PwvD","executionInfo":{"status":"ok","timestamp":1717876624456,"user_tz":0,"elapsed":2227,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"}},"outputId":"766817ab-2753-4817-9e5c-9c890d64c1b7"},"id":"XsrUg894PwvD","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 222, 222, 112)     3136      \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 111, 111, 112)     0         \n"," D)                                                              \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 109, 109, 64)      64576     \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 54, 54, 64)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 52, 52, 192)       110784    \n","                                                                 \n"," max_pooling2d_2 (MaxPoolin  (None, 26, 26, 192)       0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 24, 24, 320)       553280    \n","                                                                 \n"," max_pooling2d_3 (MaxPoolin  (None, 12, 12, 320)       0         \n"," g2D)                                                            \n","                                                                 \n"," flatten (Flatten)           (None, 46080)             0         \n","                                                                 \n"," dense (Dense)               (None, 256)               11796736  \n","                                                                 \n"," dense_1 (Dense)             (None, 2)                 514       \n","                                                                 \n","=================================================================\n","Total params: 12529026 (47.79 MB)\n","Trainable params: 12529026 (47.79 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["## Prédiction sur l'échantillon test\n","y_test_pred = best_model.predict(X_test)\n","_, y_test_pred = zip(*y_test_pred)\n","## AUC score\n","print(\"roc_auc_score : \", roc_auc_score(test_df.target, y_test_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h0kmYClAQaBO","executionInfo":{"status":"ok","timestamp":1717876652675,"user_tz":0,"elapsed":5415,"user":{"displayName":"yatoute mintoama","userId":"12761633442990350805"}},"outputId":"a482e7e9-dff5-4686-f032-289deb25689b"},"id":"h0kmYClAQaBO","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 5s 247ms/step\n","roc_auc_score 1.0\n"]}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat":4,"nbformat_minor":5}
